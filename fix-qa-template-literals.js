#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Fix QualityAssuranceAgent.ts template literal issues
 */

const filePath = path.join(process.cwd(), 'src/agents/evaluation/QualityAssuranceAgent.ts');

function fixQualityAssuranceAgent() {
  let content = fs.readFileSync(filePath, 'utf8');
  
  console.log('üîß Fixing QualityAssuranceAgent.ts template literal issues...');
  
  // Fix the markdown report template literal that got mangled
  const markdownReportFunction = `  private generateQualityMarkdownReport(report: QualityReport): string {
    return \`# Quality Assurance Report

**Timestamp:** \${report.timestamp}  
**Overall Score:** \${report.overallScore}%

## Summary

- **Total Tests:** \${report.metrics.totalTests}
- **Passed:** \${report.metrics.passedTests}
- **Failed:** \${report.metrics.failedTests}
- **Pass Rate:** \${Math.round((report.metrics.passedTests / report.metrics.totalTests) * 100)}%

## Test Results by Category

\${Object.entries(report.metrics.categoryBreakdown).map(([category, metrics]) => \`
### \${category.charAt(0).toUpperCase() + category.slice(1)}
- **Tests:** \${metrics.total}
- **Passed:** \${metrics.passed}
- **Average Score:** \${metrics.avgScore}%
\`).join('')}

## Failed Tests

\${report.tests.filter(t => !t.passed).map(test => \`
- **\${test.name}** (\${test.category}): \${test.message}
\`).join('')}

## Recommendations

\${report.recommendations.map(r => \`- \${r}\`).join('\\n')}

---

*Generated by Quality Assurance Agent*\`;
  }`;

  // Find the start and end of the problematic function
  const functionStart = content.indexOf('private generateQualityMarkdownReport(report: QualityReport): string {');
  if (functionStart === -1) {
    console.log('‚ùå Could not find generateQualityMarkdownReport function');
    return;
  }
  
  // Find the matching closing brace
  let braceCount = 0;
  let functionEnd = functionStart;
  let inFunction = false;
  
  for (let i = functionStart; i < content.length; i++) {
    if (content[i] === '{') {
      braceCount++;
      inFunction = true;
    } else if (content[i] === '}') {
      braceCount--;
      if (inFunction && braceCount === 0) {
        functionEnd = i + 1;
        break;
      }
    }
  }
  
  if (functionEnd === functionStart) {
    console.log('‚ùå Could not find end of generateQualityMarkdownReport function');
    return;
  }
  
  // Replace the function
  const beforeFunction = content.substring(0, functionStart);
  const afterFunction = content.substring(functionEnd);
  
  content = beforeFunction + markdownReportFunction + afterFunction;
  
  // Fix any remaining template literal issues
  content = content.replace(/console\.log\(`([^`]*)\$\{([^}]+)\}([^`]*)`\)/g, 'console.log(`$1${$2}$3`)');
  
  fs.writeFileSync(filePath, content, 'utf8');
  console.log('‚úÖ Fixed QualityAssuranceAgent.ts template literal issues');
}

if (require.main === module) {
  fixQualityAssuranceAgent();
}
