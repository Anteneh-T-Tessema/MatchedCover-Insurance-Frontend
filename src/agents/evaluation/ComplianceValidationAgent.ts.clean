import { BaseAgent } from '../BaseAgent';
import SOC2EnhancedConfig from '../../config/soc2-enhanced-config';
import * as fs from 'fs';
import * as path from 'path';

export interface ValidationResult {
  status: 'pass' | 'fail' | 'warning';
  score: number;
  findings: string[];
  recommendations: string[];
  details: Record<string, unknown>;
}

export interface ComplianceValidationResult {
  overall: ValidationResult;
  controls: Record<string, ValidationResult>;
  framework: string;
  timestamp: string;
  overallComplianceScore: number; // For backward compatibility
  summary: {
    totalControls: number;
    passedControls: number;
    failedControls: number;
    warningControls: number;
    overallScore: number;
  };
}

/**
 * ComplianceValidationAgent - Enhanced agent with comprehensive error handling and validation
 * 
 * This agent provides robust functionality with:
 * - Comprehensive input validation
 * - Secure environment variable handling
 * - Enhanced error handling and logging
 * - Performance monitoring and metrics
 * 
 * @class ComplianceValidationAgent
 */
export class ComplianceValidationAgent extends BaseAgent {
  private enhancedConfig: typeof SOC2EnhancedConfig;

  constructor() {
    super('ComplianceValidationAgent', '1.0.0');
    this.enhancedConfig = SOC2EnhancedConfig;
  }

  public async validateSOC2Compliance(): Promise<ComplianceValidationResult> {
    try {
      this.log('Starting SOC 2 compliance validation', 'info');
      
      const controls = this.enhancedConfig.ENHANCED_SOC2_CONTROLS;
      const controlResults: Record<string, ValidationResult> = {};
      let totalScore = 0;
      let passedControls = 0;
      let failedControls = 0;
      let warningControls = 0;

      // Validate each control
      for (const control of controls) {
        try {
          const result = await this.validateControl(control.id, control);
          controlResults[control.id] = result;
          totalScore += result.score;

          switch (result.status) {
            case 'pass':
              passedControls++;
              break;
            case 'fail':
              failedControls++;
              break;
            case 'warning':
              warningControls++;
              break;
          }
        } catch (error) {
          console.error("Error:", error);
          throw error;
        }
      }

      const totalControls = controls.length;
      const overallScore = totalControls > 0 ? (totalScore / totalControls) : 0;

      const overallResult: ValidationResult = {
        status: overallScore >= 80 ? 'pass' : overallScore >= 60 ? 'warning' : 'fail',
        score: overallScore,
        findings: [
          `${passedControls} controls passed`,
          `${failedControls} controls failed`,
          `${warningControls} controls have warnings`
        ],
        recommendations: this.generateRecommendations(failedControls, warningControls),
        details: {
          totalControls,
          passedControls,
          failedControls,
          warningControls
        }
      };

      return {
        overall: overallResult,
        controls: controlResults,
        framework: 'SOC2',
        timestamp: new Date().toISOString(),
        overallComplianceScore: overallScore, // For backward compatibility
        summary: {
          totalControls,
          passedControls,
          failedControls,
          warningControls,
          overallScore
        }
      };
    } catch (error) {
      this.log(`Error during SOC 2 validation: ${error}`, 'error');
      throw error;
    }
  }

  public async validateSOC2Requirements(): Promise<ComplianceValidationResult> {
    try {
      // This method provides backward compatibility
      return this.validateSOC2Compliance();
    } catch (error) {
      this.log(`Error validating SOC2 requirements: ${error}`, 'error');
      throw error;
    }
  }

  private async validateControl(controlId: string, control: { 
    id: string; 
    description?: string; 
    category?: string; 
    implementationStatus?: string; 
    testingStatus?: string; 
    effectiveness?: string 
  }): Promise<ValidationResult> {
    try {
      let score = 0;
      const findings: string[] = [];
      const recommendations: string[] = [];

      // Validate implementation status
      switch (control.implementationStatus) {
        case 'implemented':
          score += 25;
          findings.push(`Control ${controlId} is fully implemented`);
          break;
        case 'partially_implemented':
          score += 15;
          findings.push(`Control ${controlId} is partially implemented`);
          recommendations.push(`Complete implementation of ${controlId}`);
          break;
        case 'not_implemented':
          score += 5;
          findings.push(`Control ${controlId} is not implemented`);
          recommendations.push(`Implement control ${controlId} immediately`);
          break;
        default:
          score += 10; // Default minimal score for existing structure
          findings.push(`Control ${controlId} implementation status unclear`);
          recommendations.push(`Define implementation status for ${controlId}`);
      }

      // Validate testing status
      switch (control.testingStatus) {
        case 'tested':
          score += 20;
          findings.push(`Control ${controlId} has been tested`);
          break;
        case 'in_progress':
          score += 15;
          findings.push(`Control ${controlId} testing is in progress`);
          recommendations.push(`Complete testing for ${controlId}`);
          break;
        case 'not_tested':
          score += 5;
          findings.push(`Control ${controlId} has not been tested`);
          recommendations.push(`Implement testing procedures for ${controlId}`);
          break;
        default:
          score += 10;
          findings.push(`Control ${controlId} testing status unclear`);
          recommendations.push(`Define testing procedures for ${controlId}`);
      }

      // Validate effectiveness
      switch (control.effectiveness) {
        case 'effective':
          score += 25;
          findings.push(`Control ${controlId} is operating effectively`);
          break;
        case 'needs_improvement':
          score += 15;
          findings.push(`Control ${controlId} needs improvement`);
          recommendations.push(`Improve effectiveness of ${controlId}`);
          break;
        case 'ineffective':
          score += 5;
          findings.push(`Control ${controlId} is ineffective`);
          recommendations.push(`Fix and enhance ${controlId} immediately`);
          break;
        default:
          score += 10;
          findings.push(`Control ${controlId} effectiveness not evaluated`);
          recommendations.push(`Evaluate effectiveness of ${controlId}`);
      }

      // Determine overall status based on score
      let status: 'pass' | 'fail' | 'warning';
      if (score >= 60) {
        status = 'pass';
      } else if (score >= 40) {
        status = 'warning';
      } else {
        status = 'fail';
      }

      return {
        status,
        score,
        findings,
        recommendations,
        details: {
          implementationStatus: control.implementationStatus,
          testingStatus: control.testingStatus,
          effectiveness: control.effectiveness
        }
      };
    } catch (error) {
      this.log(`Error validating control ${controlId}: ${error}`, 'error');
      return {
        status: 'fail',
        score: 0,
        findings: [`Error validating control ${controlId}: ${error}`],
        recommendations: [`Fix validation logic for control ${controlId}`],
        details: { error: error }
      };
    }
  }

  private generateRecommendations(failedControls: number, warningControls: number): string[] {
    const recommendations: string[] = [];
    
    if (failedControls > 0) {
      recommendations.push(`Address ${failedControls} failed controls immediately`);
    }
    
    if (warningControls > 0) {
      recommendations.push(`Review and improve ${warningControls} controls with warnings`);
    }
    
    recommendations.push('Conduct regular compliance assessments');
    recommendations.push('Implement automated monitoring for continuous compliance');
    
    return recommendations;
  }

  public async generateComplianceReport(): Promise<string> {
    try {
      const validation = await this.validateSOC2Compliance();
      
      return `
# SOC 2 Compliance Validation Report

## Summary
- **Overall Score**: ${validation.summary.overallScore.toFixed(2)}%
- **Status**: ${validation.overall.status.toUpperCase()}
- **Total Controls**: ${validation.summary.totalControls}
- **Passed**: ${validation.summary.passedControls}
- **Failed**: ${validation.summary.failedControls}
- **Warnings**: ${validation.summary.warningControls}

## Recommendations
${validation.overall.recommendations.map(rec => `- ${rec}`).join('\n')}

## Generated: ${validation.timestamp}
      `;
    } catch (error) {
      this.log(`Error generating compliance report: ${error}`, 'error');
      return `Error generating report: ${error}`;
    }
  }
}

// CLI functionality
async function runCLI() {
  try {
    const agent = new ComplianceValidationAgent();
    const command = process.argv[2];

    switch (command) {
      case 'soc2':
        const result = await agent.validateSOC2Compliance();
        if (result) {
          console.log(`âœ… SOC 2 Compliance Score: ${result.overallComplianceScore.toFixed(2)}%`);
          console.log(`ðŸ“Š Status: ${result.overall.status.toUpperCase()}`);
          console.log(`ðŸ“‹ Controls: ${result.summary.passedControls}/${result.summary.totalControls} passed`);
          
          // Save results
          const outputDir = path.join(process.cwd(), 'compliance-validation-output');
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }
          
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const resultFile = path.join(outputDir, `soc2-validation-${timestamp}.json`);
          fs.writeFileSync(resultFile, JSON.stringify(result, null, 2));
          
          // Generate and save report
          const reportFile = path.join(outputDir, `soc2-validation-report-${timestamp}.md`);
          const report = await agent.generateComplianceReport();
          fs.writeFileSync(reportFile, report);
          
          console.log(`ðŸ’¾ Results saved to: ${resultFile}`);
          console.log(`ðŸ“„ Report saved to: ${reportFile}`);
        }
        break;
      case 'report':
        const reportContent = await agent.generateComplianceReport();
        console.log(reportContent);
        break;
      default:
        console.log(`Unknown command: ${command}`);
        console.log('Available commands: soc2, report');
        process.exit(1);
    }
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  runCLI();
}
